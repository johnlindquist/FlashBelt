<project name="RobotLegs-Generator-1.0" default="main">

	<property file="project.properties" />
	<property file="build/config/robotlegs-generator.properties" />
	<property file="build/config/log.properties" />
	

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${libs.dir}" />
	<taskdef name="stringutil" classname="ise.antelope.tasks.StringUtilTask" />
	<taskdef resource="dialog-task.properties" classpath="${libs.dir}" />

	
	<target name="mediatorMap.mapView()">
		<fileset id="myFileSet" dir="${project.url}/${view.dir}">
			<include name="**" />
		</fileset>
		<pathconvert property="myFiles" refid="myFileSet">
		</pathconvert>
		<for list="${myFiles}" delimiter=";" param="file">
			<sequential>
				<stringutil property="lastIndexOfBackslash" string="@{file}">
					<lastindexof string="\" />
				</stringutil>
				<stringutil property="indexOfPeriod" string="@{file}">
					<indexof string="." />
				</stringutil>
				<stringutil property="actionScriptFile" string="@{file}">
					<substring beginindex="${lastIndexOfBackslash}" endindex="${indexOfPeriod}" />
				</stringutil>
				<stringutil property="actionScriptFile" string="${actionScriptFile}">
					<substring beginindex="1" />
				</stringutil>
				<echo>${actionScriptFile}</echo>

				<antcall target="context-token-replace">
					<param name="replaceType" value="map views to mediators" />
					<param name="contextToken" value="mediatorMap.mapView(${actionScriptFile},${actionScriptFile}Mediator);" />
					<param name="className" value="${actionScriptFile}" />
					<param name="imports" value="${view.dir}.${actionScriptFile},${view.dir}.${actionScriptFile}Mediator" />
				</antcall>

				<stringutil property="getFirstLetter" string="${actionScriptFile}">
					<substring endindex="1" />
				</stringutil>
				<stringutil property="firstLetter" string="${getFirstLetter}">
					<lowercase />
				</stringutil>
				<stringutil property="theRest" string="${actionScriptFile}">
					<substring beginindex="1" />
				</stringutil>

				<antcall target="create-mediator">
					<param name="view" value="${actionScriptFile}" />
					<param name="viewVar" value="${firstLetter}${theRest}" />
				</antcall>
				
				<dialog dialogtitle="${actionScriptFile}Mediator)" propertiespath="c:\">
					<textfield property="@{file}signals" defaultvalue="" label="Signals: " size="20" />
				</dialog>

				<for list="${@{file}signals}" delimiter="," param="signal">
					<sequential>
						<echo>Injecting @{signal} into ${actionScriptFile}Mediator</echo>
						<antcall target="inject-signal-into-mediator">
							<param name="view" value="${actionScriptFile}" />
							<param name="signal" value="@{signal}" />
						</antcall>
					</sequential>
				</for>

			</sequential>
		</for>
	</target>

	<target name="test1">
		<property name="prop1" value="AbcDEAD" />
		<echo>prop1 before = ${prop1}</echo>
		<stringutil string="${prop1}" property="prop1">
			<replace regex="(^[A-Z])" replacement="\\L\\u$1&amp;" />
		</stringutil>
		<echo>prop1 after = ${prop1}</echo>
	</target>

	<target name="signalCommandMap.mapSignalClass()">
		<dialog dialogtitle="signalCommandMap.mapSignalClass" propertiespath="c:\">

			<textfield property="signalName" defaultvalue="" label="Signal Name: " required="true" size="20" />

			<textfield property="dependencies" defaultvalue="" label="Dependenices: " required="false" size="20" />
		</dialog>

		<antcall target="context-token-replace">
			<param name="replaceType" value="map signals to commands" />
			<param name="contextToken" value="signalCommandMap.mapSignalClass(${signalName}, ${signalName}Command);" />
			<param name="className" value="${signalName}" />
			<param name="imports" value="${signals.dir}.${signalName},${control.dir}.${signalName}Command" />
		</antcall>
		<antcall target="create-signal">
			<param name="className" value="${signalName}" />
			<param name="dependencies" value="${dependencies}" />
		</antcall>
		<antcall target="create-asynccommand">
			<param name="className" value="${signalName}Command" />
			<param name="dependencies" value="${dependencies}" />
		</antcall>

	</target>

	<target name="context-token-replace">

		<replace file="${project.url}/${project.name}Context.as" token="//${replaceType}" value="//${replaceType}${line.separator}
											${contextToken}" />
		<echo>${imports}</echo>
		<for list="${imports}" delimiter="," param="import">
			<sequential>
				<replace file="${project.url}/${project.name}Context.as" token="//imports" value="//imports${line.separator}
							import ${namespace}.@{import};" />
			</sequential>
		</for>

	</target>

	<target name="inject-signal-into-mediator">
		<stringutil property="getFirstLetter" string="${signal}">
			<substring endindex="1" />
		</stringutil>
		<stringutil property="firstLetter" string="${getFirstLetter}">
			<lowercase />
		</stringutil>
		<stringutil property="theRest" string="${signal}">
			<substring beginindex="1" />
		</stringutil>
		<replace file="${project.url}/${view.dir}/${view}Mediator.as" token="//imports" value="//imports${line.separator}
											import ${namespace}.${signals.dir}.${signal};" />

		<replace file="${project.url}/${view.dir}/${view}Mediator.as" token="//signals" value="//signals${line.separator}
											[Inject]${line.separator}
											public var ${firstLetter}${theRest}:${signal};" />
	</target>


	<target name="dialog-signal">
		<taskdef resource="dialog-task.properties" classpath="${build.dir}" />
		<dialog dialogtitle="Build Signal" propertiespath="c:\">
			<textfield property="signalClassName" defaultvalue="" label="Signal Name: " required="true" size="20" />
			<textfield property="signalDependencies" defaultvalue="" label="Dependenices: " required="false" size="20" />
		</dialog>

		<antcall target="create-signal">
			<param name="className" value="${signalClassName}" />
			<param name="dependencies" value="${signalDependencies}" />
		</antcall>

	</target>

	<property name="lowerCaseDependency" value="" />


	<target name="create-asynccommand">
		<echo>${log.create.flight.asynccommand.message}</echo>

		<var name="commandDependencies" value="" />
		<var name="injectDependency" value="" />
		<var name="tabSpacing" value="" />

		<for list="${dependencies}" param="dependency">
			<sequential>
				<stringutil property="getFirstLetter" string="@{dependency}">
					<substring endindex="1" />
				</stringutil>
				<stringutil property="firstLetter" string="${getFirstLetter}">
					<lowercase />
				</stringutil>
				<stringutil property="theRest" string="@{dependency}">
					<substring beginindex="1" />
				</stringutil>
				<echo>public var ${firstLetter}${theRest}:@{dependency};</echo>
				<var name="injectDependency" value="[Inject]${line.separator}
													public var ${firstLetter}${theRest}:@{dependency};
													${line.separator}
													" />

				<var name="commandDependencies" value="${commandDependencies}${injectDependency}" />
			</sequential>
		</for>


		<copy file="${flight.templates.dir}/AsyncCommand.as" tofile="${project.url}/${control.dir}/${className}.as" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="className" value="${className}" />
					<token key="dependencies" value="${commandDependencies}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="create-signal">
		<copy file="${signals.templates.dir}/Signal.as" tofile="${project.url}/${signals.dir}/${className}.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="className" value="${className}" />
					<token key="dependencies" value="${dependencies}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="main" depends="create-RobotLegs-directories" />

	<!-- create default RobotLegs directories -->
	<target name="create-RobotLegs-directories">
		<echo>${log.create.RobotLegs.directories.message}</echo>
		<mkdir dir="${project.url}/${control.dir}" />
		<mkdir dir="${project.url}/${services.dir}" />
		<mkdir dir="${project.url}/${events.dir}" />
		<mkdir dir="${project.url}/utils" />
		<mkdir dir="${project.url}/helpers" />
		<mkdir dir="${project.url}/${view.dir}" />
		<mkdir dir="${project.url}/${view.dir}/events" />
		<mkdir dir="${project.url}/${view.dir}/components" />
		<mkdir dir="${project.url}/${view.dir}/mediators" />
		<mkdir dir="${project.url}/${view.dir}/helpers" />
		<mkdir dir="${project.url}/${view.dir}/presenters" />
		<mkdir dir="${project.url}/${model.dir}/${vo.dir}" />
	</target>

	<!-- move libraries and source code -->
	<target name="move-libraries-and-source-code">
		<echo>${log.create.RobotLegs.libraries.message}</echo>
		<echo>Copy libs folder</echo>
		<copy todir="${project.root.url}/libs">
			<fileset dir="${templates.dir}/libs" />
		</copy>
	</target>

	<!-- Generate Main class, context & base service class -->
	<target name="create-main-class-context">
		<echo>${log.create.main.class.and.context}</echo>
		<copy file="${robotlegs.templates.dir}/SignalContext.as" tofile="${project.url}/${project.name}Context.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="robotlegs.dir" value="${robotlegs.dir}" />
				</replacetokens>
			</filterchain>
		</copy>
		<echo>Copy ${templates.dir}/Main.as</echo>
		<copy file="${templates.dir}/Main.as" tofile="${project.main.url}/Main.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
				</replacetokens>
			</filterchain>
		</copy>

	</target>

	<!-- add-startup-command -->
	<target name="add-startup-command">

		<echo>${log.add.startup.commmand.message}</echo>

		<copy file="${robotlegs.templates.dir}/StartupCommand.as" tofile="${project.url}/${control.dir}/StartupCommand.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="Startup" />
				</replacetokens>
			</filterchain>
		</copy>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
						     commandMap.mapEvent(ContextEvent.STARTUP, StartupCommand, ContextEvent, true);" />

		<replace file="${project.url}/${project.name}Context.as" token="super.startup();" value="dispatchEvent( new ContextEvent( ContextEvent.STARTUP ) );" />
	</target>

	<!-- add-command -->
	<target name="add-command">

		<echo>${log.create.commmand.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/Command.as" tofile="${project.url}/${control.dir}/${gesture}Command.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

	</target>

	<target name="add-event-command-user-gesture">

		<echo>${log.add.event.commmand.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/CommandWithEvent.as" tofile="${project.url}/${control.dir}/${gesture}Command.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/Event.as" tofile="${project.url}/${events.dir}/${gesture}Event.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_EVENT, ${gesture}Command, ${gesture}Event);" />
	</target>

	<target name="add-event-command-service-user-gesture">

		<echo>${log.add.event.commmand.services.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/ResultCommand.as" tofile="${project.url}/${control.dir}/${gesture}ResultCommand.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceCommand.as" tofile="${project.url}/${control.dir}/${gesture}Command.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceEvent.as" tofile="${project.url}/${events.dir}/${gesture}Event.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/ServiceWithEvent.as" tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/IService.as" tofile="${project.url}/${services.dir}/I${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add Services" value="// todo: Add Services${line.separator}
			        injector.mapSingletonOf( I${gesture}Service, ${gesture}Service );" />

		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add commands" value="// todo: add commands${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_EVENT, ${gesture}Command, ${gesture}Event);${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_RESULT_EVENT, ${gesture}ResultCommand, ${gesture}Event);" />
	</target>

	<!-- create ValueObject class -->
	<target name="create-value-object">
		<echo>${log.value.object.message}</echo>

		<copy file="${robotlegs.templates.dir}/ValueObject.as" tofile="${project.url}/${model.dir}/${vo.dir}/${gesture}VO.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="vo.dir" value="${vo.dir}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!-- create mediator class -->
	<target name="create-mediator">
		<echo>${log.view.mediator.message}</echo>

		<copy file="${robotlegs.templates.dir}/Mediator.as" tofile="${project.url}/${view.dir}/${view}Mediator.as" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
					<token key="view" value="${view}" />
					<token key="viewVar" value="${viewVar}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>


	<!-- create presenter-view class -->
	<target name="create-presenter-view">
		<echo>${log.presenter.view.message}</echo>

		<convertToUpperCase property="upperCaseGesture" value="${gesture}" />
		<convertToLowerCase property="lowerCaseGesture" value="${gesture}" />

		<copy file="${robotlegs.templates.dir}/Presenter.as" tofile="${project.url}/${view.dir}/presenters/${gesture}Presenter.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/View.mxml" tofile="${project.url}/${view.dir}/${gesture}View.mxml" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="view.dir" value="${view.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register singleton with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: add singleton" value="// todo: add singleton${line.separator}
					      injector.mapSingleton( ${gesture}Presenter );" />

	</target>

	<!-- create model class -->
	<target name="create-model-class">
		<echo>${log.create.model.class.message}</echo>

		<copy file="${robotlegs.templates.dir}/Model.as" tofile="${project.url}/${model.dir}/${gesture}Model.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="model.dir" value="${model.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register model with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// todo: Add Model" value="// todo: Add Model${line.separator}
			        injector.mapSingleton( ${gesture}Model );" />

	</target>

	<!-- create service class -->
	<target name="create-service-class">
		<echo>${log.create.service.message}</echo>

		<copy file="${robotlegs.templates.dir}/Service.as" tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
				</replacetokens>
			</filterchain>
		</copy>

		<copy file="${robotlegs.templates.dir}/IService.as" tofile="${project.url}/${services.dir}/I${gesture}Service.as" overwrite="${overwrite.files}">
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
					<token key="services.dir " value="${services.dir}" />
					<token key="gesture" value="${gesture}" />
					<token key="upperCaseGesture" value="${upperCaseGesture}" />
					<token key="lowerCaseGesture" value="${lowerCaseGesture}" />
				</replacetokens>
			</filterchain>
		</copy>

		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" token="// TODO: Add Services" value="// TODO: Add Services${line.separator}
			        injector.mapSingletonOf( I${gesture}Service, ${gesture}Service );" />

	</target>

	<!-- private -->
	<scriptdef name="convertToUpperCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
        project.setNewProperty( attributes.get("property"), attributes.get("value").toUpperCase() );
    </scriptdef>

	<scriptdef name="convertToLowerCase" language="javascript">
		<attribute name="property" />
		<attribute name="value" />
        project.setNewProperty( attributes.get("property"), attributes.get("value").toLowerCase() );
    </scriptdef>

</project>